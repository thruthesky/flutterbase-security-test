rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {


    // 기본적으로 모든 읽기와 쓰기를 막는다.
    match /{document=**} {
      allow read: if false;
      allow write: if false;
    }
    // 사용자
    match /users/{uid} {
      // 로그인을 했으면, 도큐먼트 생성 가능
      allow create: if login();

      // 자신의 도큐먼트이면 읽기 가능.
      allow read: if request.auth.uid == uid;

      // 자신의 도큐먼트인 경우, `isAdmin` 속성은 빼고 수정 가능.
      // 관리자인 경우에도, request data 로 직접 isAmdin 속성을 수정 할 수 없다. 
      allow update: if request.auth.uid == uid && notUpdating('isAdmin');

      // 삭제는 불가능
      allow delete: if false;
    }

    // 카테고리. 모든 회원이 읽을 수 있지만, 관리자만 쓰기 가능.
    match /categories/{category} {
      allow read: if true;
      allow create, delete: if admin();
      allow update: if admin() && notUpdating('id');
    }

    // 글
    match /posts/{postId} {
      // 생성
      // - 로그인을 했으면, 도큐먼트 생성 가능
      // - 글 쓰기/수정에서 카테고리가 있어야 하며 존재 해야 함.
      allow create: if login() && toBeMyDocument() && categoryExist();

      // 아무나 글을 읽거나 목록 할 수 있음.
      allow read: if true;


      // 수정
      // - 수정은 자기 글만 가능
      // - uid 변경 불가
      // - 카테고리가 존재해야 함
      // 
      allow update: if myDocument() && categoryExist() && notUpdating('uid');


      // 삭제는 자기 글만 가능
      allow delete: if myDocument();


      // 코멘트
      // - 각 글 도큐먼트 하위에 기록
      match /comments/{comment} {
        allow read: if true;

        // 코멘트 생성 권한
        // - 입력값: uid, order, content. `post id` 는 필요 없음.
        allow create: if login() && toBeMyDocument() // 내 코멘트이어야 하고
          && exists(/databases/$(database)/documents/posts/$(postId)) // 글이 존재해야 하고
          && request.resource.data.order is string // order 가 들어와야 하고,
          && request.resource.data.order.size() == 50; // order 가 50 글자 길이어야 한다.

        // 코멘트 수정 권한
        // - 내 코멘트이고,
        // - `uid`, `order` 를 업데이트 하지 않아야 한다.
        allow update: if login() && toBeMyDocument() && notUpdating('uid') && notUpdating('order');

        // 코멘트 삭제 권한
        // - 내 코멘트이면 삭제 가능
        allow delete: if login() && myDocument();
      }
    }


    // 설정. 모든 회원이 읽을 수 있지만, 관리자만 쓰기 가능.
    match /settings/{document=**} {
      allow read: if true;
      allow write: if admin();
    }



    // // request data 의 값을 리턴하는 short cut 함수
    // //
    // // 예) `r('var_name')`
    // // 
    // //
    // function r(prop) {
    //   return request.resource.data[prop];
    // }

    // // request data 에 값이 있는지 검사하고, 그 값이 배열인지 검사하는 것이다.
    // // 아래의 예제를 짧게 사용 할 수 있다.
    // // 짧은 예) isList('categories')
    // // 긴 예) requestHas('categories') && r('categories') is list
    // function isList(prop) {
    //   return requestHas(prop) && r(prop) is list;
    // }

    // // request data 에 값이 있는지 검사하고, 그 값이 문자열인지 검사하는 것이다.
    // // 아래의 예제를 짧게 사용 할 수 있다.
    // // 짧은 예) iString('category')
    // // 긴 예) requestHas('category') && r('category') is string
    // function isString(prop) {
    //   return requestHas(prop) && r(prop) is string;
    // }

    // 로그인을 했는지 검사
    function login() {
      return request.auth.uid != null;
    }

    // 필드를 변경하지 못하게 검사
    //
    // request data 에 field 가 없거나, 있다면, 저장되어져 있는 값과 동일해야 한다.
    // 즉, 값을 변경을 하지 못하도록 하는 체크하는 함수이다.
    function notUpdating(field) {
      return !(field in request.resource.data) || resource.data[field] == request.resource.data[field];
    }

    // request data 에 특정 field 가 있는지 검사한다.
    // function requestHas(field) {
    //   return field in request.resource.data;
    // }

    // 사용자의 uid 와 문서에 저장되어져 있는 uid 가 일치하면 본인의 데이터
    function myDocument() {
      return resource.data.uid == request.auth.uid;
    }

    // 사용자의 uid 와 저장할 데이터의 uid 가 일치하면, 나의 데이터로 저장 될 것이다.
    function toBeMyDocument() {
      return request.resource.data.uid == request.auth.uid;
    }

    // 관리자 인지 확인.
    //
    // 사용자 도큐먼트에 `isAdmin` 속성이 true 인 경우, 관리자로 간주한다.
    function admin() {
      return login() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    // 카테고리가 존재하는지 검사한다.
    // - `category` 에 category id 값이 들어와야 한다.
    function categoryExist() {
      return exists(/databases/$(database)/documents/categories/$(request.resource.data.category));
    }

    // 게시글이 존재하는지 검사한다.
    // - `postId` 에 post id 값이 들어와야 한다.
    function postExist() {
      return exists(/databases/$(database)/documents/posts/$(request.resource.data.postId));
    }

  }


}